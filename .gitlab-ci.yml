# Define global variables
# Doc: https://docs.gitlab.com/ee/ci/yaml/README.html#variables
variables:
  CI_GOLANGCI_LINT_VERSION: "1.18.0"
  CI_IMAGE_NAME: "docker.artifacts.lo/$CI_PROJECT_PATH"

# Define pipeline stages
# Doc: https://docs.gitlab.com/ee/ci/yaml/README.html#stages
stages:
  - build
  - check
  - test

# Builds a docker image
# Doc: https://docs.gitlab.com/ee/ci/yaml/README.html#stage
build:image:
  stage: build
  script:
    - docker build --pull --build-arg GIT_COMMIT=$CI_COMMIT_SHA --tag $CI_IMAGE_NAME:$CI_COMMIT_SHA .
    - docker tag $CI_IMAGE_NAME:$CI_COMMIT_SHA $CI_IMAGE_NAME:$CI_COMMIT_REF_SLUG
    - docker push $CI_IMAGE_NAME:$CI_COMMIT_REF_SLUG

# Checks whether the application formatting is correct
# Doc: https://docs.gitlab.com/ee/ci/yaml/README.html#stage
check:fmt:
  stage: check
  image: $CI_IMAGE_NAME:$CI_COMMIT_REF_SLUG
  script:
    - make fmt-check
  dependencies:
    - build:image
  tags:
    - docker

# Checks the application code against the enabled linters
# Doc: https://docs.gitlab.com/ee/ci/yaml/README.html#stage
check:lint:
  stage: check
  image: $CI_IMAGE_NAME:$CI_COMMIT_REF_SLUG
  before_script:
    - curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(go env GOPATH)/bin v$CI_GOLANGCI_LINT_VERSION
  script:
    - make lint
  dependencies:
    - build:image
  tags:
    - docker

# Runs the tests
# Doc: https://docs.gitlab.com/ee/ci/yaml/README.html#stage
run:tests:
  stage: test
  image: $CI_IMAGE_NAME:$CI_COMMIT_REF_SLUG
  script:
    - make test
  dependencies:
    - check:fmt
  tags:
    - docker
